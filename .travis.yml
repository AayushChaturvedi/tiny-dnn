sudo: required
dist: trusty

language: cpp

os:
  - linux
  - osx

compiler:
  - gcc
  - clang

cache:
  pip: true
  directories:
    - $HOME/.pip-cache/

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
      - george-edison55-cmake-3.x
    packages:
      - gcc-4.8
      - g++-4.8
      - clang
      - cmake
      - git
      # Optional dependencies
      - libtbb-dev
      # coveralls dependencies
      - gem
      - lcov
      # caffe-importer dependencies
      - libprotobuf-dev
      - protobuf-compiler

  coverity_scan:

    project:
      name: tiny-dnn/tiny-dnn
      version: 1.0
      description: Header only, dependency-free deep learning framework in C++11

    notification_email: example@example.com

    build_command_prepend: cmake -DUSE_TBB=ON
            -DUSE_SSE=ON
            -DUSE_AVX=ON
            -DUSE_DOUBLE=OFF
            -DBUILD_TESTS=ON
            -DBUILD_EXAMPLES=ON .

    build_command: make -j8

    branch_pattern: master

branches:
  only:
    - master
    - feat/tensor_integration
env:
  global:
    - USE_TBB=ON
    - BUILD_TESTS=ON
    - BUILD_EXAMPLES=ON
    - COVERALLS=ON
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
    - secure: "klsXQXZDTInfHtiqbDyUcM5VMpZWO1cWnwxc/253Y6foCIcgCV+vLzRQz0CzBl18e4+KQdQBXi1/FcpZMjdlvQF80bqisU/g6IKF7C5h29A62MbosSATSHKLelmRrNfEwvGthK2fc13akM8Z+FdKespbB7Q3ME+PaBl84y2Uq2UjAr48AzMFlCyEXa969oZwrV7B5qJvxL9PdTX2sXgFHGryFeffl7w2yb85cBJ/zDiGdMvPUTN+y9GtzmYbQFpMWaBd0jIQHlkY6SigSvzqt2fyj8ptU13MT+Big0XkMC1KrvClEKqVgZiCZ+CSxH1TUXj0WB54f8dabfCFR+YdysQp6jLJNjEOuovU+1dpm/JXJgZQ/05ZmeLQE+S6gc23ous3nTrlChTwE5YS9rX1Jc9NN5+LHv1DaMDzuM4Cagnexr6zXIAJsYsSL5co/rKpjtBqHrVczMLHHdrf1preipXOemusvOPFCYjkC92giz3Ry2BAIUVNz6LRfu6RnLMR7ca98n2F26k4v4jeBjkKWqSgBBvNNDAazzRQj7TIUcGNTc+4Biiqu7OrEvt1cMoGH0PeDbUrHkqUkc2kdjqTAEnomY3HcrjteNGNe6YBnihlDhIsGTHV6ZfNE6D0gKMVQOTDxpmLyqdWko6cOPaKrjmIe8k+JNWp0uVmVsXuN98="

  matrix:
    - USE_SSE=OFF USE_AVX=OFF USE_DOUBLE=OFF
    - USE_SSE=ON  USE_AVX=ON USE_DOUBLE=OFF
    - USE_SSE=ON  USE_AVX=ON USE_DOUBLE=ON

matrix:
  exclude: # On OSX g++ is a symlink to clang++ by default
    - os: osx
      compiler: gcc

before_install:
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$CXX" == "g++" ]; then
       export CC="gcc-4.8";
       export CXX="g++-4.8";
    fi
  - gcc --version
  - g++ --version
  - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-

install:
  - bash -x .travis/install.sh
  - gem install coveralls-lcov

before_script:
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$CXX" == "g++-4.8" ]; then
      lcov --directory . --zerocounters;
      cmake -DUSE_TBB=$USE_TBB
            -DUSE_SSE=$USE_SSE
            -DUSE_AVX=$USE_AVX
            -DUSE_DOUBLE=$USE_DOUBLE
            -DBUILD_TESTS=$BUILD_TESTS
            -DCOVERALLS=$COVERALLS
            -DBUILD_EXAMPLES=$BUILD_EXAMPLES .;
    fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$CXX" == "clang++" ]; then
      cmake -DUSE_SSE=$USE_SSE
            -DUSE_AVX=$USE_AVX
            -DBUILD_TESTS=$BUILD_TESTS
            -DBUILD_EXAMPLES=$BUILD_EXAMPLES .;
    fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      cmake -DUSE_TBB=$USE_TBB
            -DUSE_AVX=OFF
            -DBUILD_TESTS=$BUILD_TESTS .;
    fi

script:
  - make -j2
  - test/tiny_dnn_test
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      make clang-format-check;
    fi

after_success:
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$CXX" == "g++-4.8" ]; then
      lcov --directory . --capture --output-file coverage.info;
      lcov --remove coverage.info 'test/*' 'third_party/*' 'cereal/*' '/usr/*' 'tiny_dnn/io/caffe/caffe.pb.*' --output-file coverage.info;
      lcov --list coverage.info;
      coveralls-lcov --source-encoding=ISO-8859-1 coverage.info;
    fi
